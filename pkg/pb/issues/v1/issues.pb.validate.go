// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/pb/issues/v1/issues.proto

package issuesv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _issues_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Issue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Issue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Issue with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IssueMultiError, or nil if none found.
func (m *Issue) ValidateAll() error {
	return m.validate(true)
}

func (m *Issue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIssueId()); err != nil {
		err = IssueValidationError{
			field:  "IssueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSummary()); l < 1 || l > 100 {
		err := IssueValidationError{
			field:  "Summary",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 500 {
		err := IssueValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Status_name[int32(m.GetStatus())]; !ok {
		err := IssueValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Resolution_name[int32(m.GetResolution())]; !ok {
		err := IssueValidationError{
			field:  "Resolution",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Type_name[int32(m.GetType())]; !ok {
		err := IssueValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Priority_name[int32(m.GetPriority())]; !ok {
		err := IssueValidationError{
			field:  "Priority",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = IssueValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetAssigneeId()); err != nil {
		err = IssueValidationError{
			field:  "AssigneeId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueValidationError{
					field:  "CreateDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueValidationError{
					field:  "CreateDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueValidationError{
				field:  "CreateDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetModifyDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueValidationError{
					field:  "ModifyDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueValidationError{
					field:  "ModifyDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModifyDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueValidationError{
				field:  "ModifyDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IssueMultiError(errors)
	}

	return nil
}

func (m *Issue) _validateUuid(uuid string) error {
	if matched := _issues_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IssueMultiError is an error wrapping multiple validation errors returned by
// Issue.ValidateAll() if the designated constraints aren't met.
type IssueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueMultiError) AllErrors() []error { return m }

// IssueValidationError is the validation error returned by Issue.Validate if
// the designated constraints aren't met.
type IssueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueValidationError) ErrorName() string { return "IssueValidationError" }

// Error satisfies the builtin error interface
func (e IssueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueValidationError{}

// Validate checks the field values on CreateIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIssueRequestMultiError, or nil if none found.
func (m *CreateIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSummary()); l < 1 || l > 100 {
		err := CreateIssueRequestValidationError{
			field:  "Summary",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Type_name[int32(m.GetType())]; !ok {
		err := CreateIssueRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Priority_name[int32(m.GetPriority())]; !ok {
		err := CreateIssueRequestValidationError{
			field:  "Priority",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetProjectId()); err != nil {
		err = CreateIssueRequestValidationError{
			field:  "ProjectId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {

		if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 100 {
			err := CreateIssueRequestValidationError{
				field:  "Description",
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.AssigneeId != nil {

		if err := m._validateUuid(m.GetAssigneeId()); err != nil {
			err = CreateIssueRequestValidationError{
				field:  "AssigneeId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateIssueRequestMultiError(errors)
	}

	return nil
}

func (m *CreateIssueRequest) _validateUuid(uuid string) error {
	if matched := _issues_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateIssueRequestMultiError is an error wrapping multiple validation errors
// returned by CreateIssueRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIssueRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIssueRequestMultiError) AllErrors() []error { return m }

// CreateIssueRequestValidationError is the validation error returned by
// CreateIssueRequest.Validate if the designated constraints aren't met.
type CreateIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIssueRequestValidationError) ErrorName() string {
	return "CreateIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIssueRequestValidationError{}

// Validate checks the field values on CreateIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIssueResponseMultiError, or nil if none found.
func (m *CreateIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetIssue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateIssueResponseValidationError{
					field:  "Issue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateIssueResponseValidationError{
					field:  "Issue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIssueResponseValidationError{
				field:  "Issue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateIssueResponseMultiError(errors)
	}

	return nil
}

// CreateIssueResponseMultiError is an error wrapping multiple validation
// errors returned by CreateIssueResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIssueResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIssueResponseMultiError) AllErrors() []error { return m }

// CreateIssueResponseValidationError is the validation error returned by
// CreateIssueResponse.Validate if the designated constraints aren't met.
type CreateIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIssueResponseValidationError) ErrorName() string {
	return "CreateIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIssueResponseValidationError{}

// Validate checks the field values on GetIssueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIssueRequestMultiError, or nil if none found.
func (m *GetIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIssueId()); err != nil {
		err = GetIssueRequestValidationError{
			field:  "IssueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IncludeDetails

	if len(errors) > 0 {
		return GetIssueRequestMultiError(errors)
	}

	return nil
}

func (m *GetIssueRequest) _validateUuid(uuid string) error {
	if matched := _issues_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetIssueRequestMultiError is an error wrapping multiple validation errors
// returned by GetIssueRequest.ValidateAll() if the designated constraints
// aren't met.
type GetIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIssueRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIssueRequestMultiError) AllErrors() []error { return m }

// GetIssueRequestValidationError is the validation error returned by
// GetIssueRequest.Validate if the designated constraints aren't met.
type GetIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIssueRequestValidationError) ErrorName() string { return "GetIssueRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIssueRequestValidationError{}

// Validate checks the field values on GetIssueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIssueResponseMultiError, or nil if none found.
func (m *GetIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIssue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIssueResponseValidationError{
					field:  "Issue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIssueResponseValidationError{
					field:  "Issue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIssueResponseValidationError{
				field:  "Issue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProjectInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIssueResponseValidationError{
					field:  "ProjectInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIssueResponseValidationError{
					field:  "ProjectInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIssueResponseValidationError{
				field:  "ProjectInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIssueResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIssueResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIssueResponseValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetIssueResponseMultiError(errors)
	}

	return nil
}

// GetIssueResponseMultiError is an error wrapping multiple validation errors
// returned by GetIssueResponse.ValidateAll() if the designated constraints
// aren't met.
type GetIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIssueResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIssueResponseMultiError) AllErrors() []error { return m }

// GetIssueResponseValidationError is the validation error returned by
// GetIssueResponse.Validate if the designated constraints aren't met.
type GetIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIssueResponseValidationError) ErrorName() string { return "GetIssueResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIssueResponseValidationError{}

// Validate checks the field values on UpdateIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIssueRequestMultiError, or nil if none found.
func (m *UpdateIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIssueId()); err != nil {
		err = UpdateIssueRequestValidationError{
			field:  "IssueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSummary()); l < 1 || l > 100 {
		err := UpdateIssueRequestValidationError{
			field:  "Summary",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Status_name[int32(m.GetStatus())]; !ok {
		err := UpdateIssueRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Resolution_name[int32(m.GetResolution())]; !ok {
		err := UpdateIssueRequestValidationError{
			field:  "Resolution",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Type_name[int32(m.GetType())]; !ok {
		err := UpdateIssueRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Priority_name[int32(m.GetPriority())]; !ok {
		err := UpdateIssueRequestValidationError{
			field:  "Priority",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {

		if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 500 {
			err := UpdateIssueRequestValidationError{
				field:  "Description",
				reason: "value length must be between 1 and 500 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.AssigneeId != nil {

		if err := m._validateUuid(m.GetAssigneeId()); err != nil {
			err = UpdateIssueRequestValidationError{
				field:  "AssigneeId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateIssueRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateIssueRequest) _validateUuid(uuid string) error {
	if matched := _issues_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateIssueRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateIssueRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIssueRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIssueRequestMultiError) AllErrors() []error { return m }

// UpdateIssueRequestValidationError is the validation error returned by
// UpdateIssueRequest.Validate if the designated constraints aren't met.
type UpdateIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIssueRequestValidationError) ErrorName() string {
	return "UpdateIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIssueRequestValidationError{}

// Validate checks the field values on UpdateIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIssueResponseMultiError, or nil if none found.
func (m *UpdateIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetIssue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateIssueResponseValidationError{
					field:  "Issue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateIssueResponseValidationError{
					field:  "Issue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateIssueResponseValidationError{
				field:  "Issue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateIssueResponseMultiError(errors)
	}

	return nil
}

// UpdateIssueResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateIssueResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIssueResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIssueResponseMultiError) AllErrors() []error { return m }

// UpdateIssueResponseValidationError is the validation error returned by
// UpdateIssueResponse.Validate if the designated constraints aren't met.
type UpdateIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIssueResponseValidationError) ErrorName() string {
	return "UpdateIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIssueResponseValidationError{}

// Validate checks the field values on DeleteIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIssueRequestMultiError, or nil if none found.
func (m *DeleteIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIssueId()); err != nil {
		err = DeleteIssueRequestValidationError{
			field:  "IssueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteIssueRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteIssueRequest) _validateUuid(uuid string) error {
	if matched := _issues_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteIssueRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteIssueRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIssueRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIssueRequestMultiError) AllErrors() []error { return m }

// DeleteIssueRequestValidationError is the validation error returned by
// DeleteIssueRequest.Validate if the designated constraints aren't met.
type DeleteIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIssueRequestValidationError) ErrorName() string {
	return "DeleteIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIssueRequestValidationError{}

// Validate checks the field values on DeleteIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIssueResponseMultiError, or nil if none found.
func (m *DeleteIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetIssue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteIssueResponseValidationError{
					field:  "Issue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteIssueResponseValidationError{
					field:  "Issue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteIssueResponseValidationError{
				field:  "Issue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteIssueResponseMultiError(errors)
	}

	return nil
}

// DeleteIssueResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteIssueResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIssueResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIssueResponseMultiError) AllErrors() []error { return m }

// DeleteIssueResponseValidationError is the validation error returned by
// DeleteIssueResponse.Validate if the designated constraints aren't met.
type DeleteIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIssueResponseValidationError) ErrorName() string {
	return "DeleteIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIssueResponseValidationError{}

// Validate checks the field values on ListIssuesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListIssuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIssuesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIssuesRequestMultiError, or nil if none found.
func (m *ListIssuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIssuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPageSize(); val < 1 || val > 1000 {
		err := ListIssuesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListIssuesRequestMultiError(errors)
	}

	return nil
}

// ListIssuesRequestMultiError is an error wrapping multiple validation errors
// returned by ListIssuesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListIssuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIssuesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIssuesRequestMultiError) AllErrors() []error { return m }

// ListIssuesRequestValidationError is the validation error returned by
// ListIssuesRequest.Validate if the designated constraints aren't met.
type ListIssuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIssuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIssuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIssuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIssuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIssuesRequestValidationError) ErrorName() string {
	return "ListIssuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIssuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIssuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIssuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIssuesRequestValidationError{}

// Validate checks the field values on ListIssuesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIssuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIssuesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIssuesResponseMultiError, or nil if none found.
func (m *ListIssuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIssuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIssues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIssuesResponseValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIssuesResponseValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIssuesResponseValidationError{
					field:  fmt.Sprintf("Issues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListIssuesResponseMultiError(errors)
	}

	return nil
}

// ListIssuesResponseMultiError is an error wrapping multiple validation errors
// returned by ListIssuesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListIssuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIssuesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIssuesResponseMultiError) AllErrors() []error { return m }

// ListIssuesResponseValidationError is the validation error returned by
// ListIssuesResponse.Validate if the designated constraints aren't met.
type ListIssuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIssuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIssuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIssuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIssuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIssuesResponseValidationError) ErrorName() string {
	return "ListIssuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIssuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIssuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIssuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIssuesResponseValidationError{}

// Validate checks the field values on ProjectInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectInfoMultiError, or
// nil if none found.
func (m *ProjectInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return ProjectInfoMultiError(errors)
	}

	return nil
}

// ProjectInfoMultiError is an error wrapping multiple validation errors
// returned by ProjectInfo.ValidateAll() if the designated constraints aren't met.
type ProjectInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectInfoMultiError) AllErrors() []error { return m }

// ProjectInfoValidationError is the validation error returned by
// ProjectInfo.Validate if the designated constraints aren't met.
type ProjectInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectInfoValidationError) ErrorName() string { return "ProjectInfoValidationError" }

// Error satisfies the builtin error interface
func (e ProjectInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectInfoValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}
