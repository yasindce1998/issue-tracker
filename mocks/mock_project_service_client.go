// Code generated by MockGen. DO NOT EDIT.
// Source: c:/Users/mohammed_yasin/Downloads/issue-tracker-mohammed_yasin-in-mem/pkg/pb/project/v1/project_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -destination=c:/Users/mohammed_yasin/Downloads/issue-tracker-mohammed_yasin-in-mem/mocks/mock_project_service_client.go -package=mocks -source=c:/Users/mohammed_yasin/Downloads/issue-tracker-mohammed_yasin-in-mem/pkg/pb/project/v1/project_grpc.pb.go ProjectServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	projectv1 "github.com/yasindce1998/issue-tracker/pkg/pb/project/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockProjectServiceClient is a mock of ProjectServiceClient interface.
type MockProjectServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceClientMockRecorder
	isgomock struct{}
}

// MockProjectServiceClientMockRecorder is the mock recorder for MockProjectServiceClient.
type MockProjectServiceClientMockRecorder struct {
	mock *MockProjectServiceClient
}

// NewMockProjectServiceClient creates a new mock instance.
func NewMockProjectServiceClient(ctrl *gomock.Controller) *MockProjectServiceClient {
	mock := &MockProjectServiceClient{ctrl: ctrl}
	mock.recorder = &MockProjectServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectServiceClient) EXPECT() *MockProjectServiceClientMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectServiceClient) CreateProject(ctx context.Context, in *projectv1.CreateProjectRequest, opts ...grpc.CallOption) (*projectv1.CreateProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProject", varargs...)
	ret0, _ := ret[0].(*projectv1.CreateProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectServiceClientMockRecorder) CreateProject(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectServiceClient)(nil).CreateProject), varargs...)
}

// DeleteProject mocks base method.
func (m *MockProjectServiceClient) DeleteProject(ctx context.Context, in *projectv1.DeleteProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProject", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectServiceClientMockRecorder) DeleteProject(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectServiceClient)(nil).DeleteProject), varargs...)
}

// GetProject mocks base method.
func (m *MockProjectServiceClient) GetProject(ctx context.Context, in *projectv1.GetProjectRequest, opts ...grpc.CallOption) (*projectv1.GetProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProject", varargs...)
	ret0, _ := ret[0].(*projectv1.GetProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectServiceClientMockRecorder) GetProject(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectServiceClient)(nil).GetProject), varargs...)
}

// ListProjects mocks base method.
func (m *MockProjectServiceClient) ListProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*projectv1.ListProjectsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjects", varargs...)
	ret0, _ := ret[0].(*projectv1.ListProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectServiceClientMockRecorder) ListProjects(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectServiceClient)(nil).ListProjects), varargs...)
}

// StreamProjectUpdates mocks base method.
func (m *MockProjectServiceClient) StreamProjectUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[projectv1.ProjectUpdateRequest, projectv1.ProjectUpdateResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamProjectUpdates", varargs...)
	ret0, _ := ret[0].(grpc.BidiStreamingClient[projectv1.ProjectUpdateRequest, projectv1.ProjectUpdateResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamProjectUpdates indicates an expected call of StreamProjectUpdates.
func (mr *MockProjectServiceClientMockRecorder) StreamProjectUpdates(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamProjectUpdates", reflect.TypeOf((*MockProjectServiceClient)(nil).StreamProjectUpdates), varargs...)
}

// UpdateProject mocks base method.
func (m *MockProjectServiceClient) UpdateProject(ctx context.Context, in *projectv1.UpdateProjectRequest, opts ...grpc.CallOption) (*projectv1.UpdateProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProject", varargs...)
	ret0, _ := ret[0].(*projectv1.UpdateProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectServiceClientMockRecorder) UpdateProject(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectServiceClient)(nil).UpdateProject), varargs...)
}

// UpdateProjectWithIssue mocks base method.
func (m *MockProjectServiceClient) UpdateProjectWithIssue(ctx context.Context, in *projectv1.UpdateProjectWithIssueRequest, opts ...grpc.CallOption) (*projectv1.UpdateProjectWithIssueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectWithIssue", varargs...)
	ret0, _ := ret[0].(*projectv1.UpdateProjectWithIssueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectWithIssue indicates an expected call of UpdateProjectWithIssue.
func (mr *MockProjectServiceClientMockRecorder) UpdateProjectWithIssue(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectWithIssue", reflect.TypeOf((*MockProjectServiceClient)(nil).UpdateProjectWithIssue), varargs...)
}

// MockProjectServiceServer is a mock of ProjectServiceServer interface.
type MockProjectServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceServerMockRecorder
	isgomock struct{}
}

// MockProjectServiceServerMockRecorder is the mock recorder for MockProjectServiceServer.
type MockProjectServiceServerMockRecorder struct {
	mock *MockProjectServiceServer
}

// NewMockProjectServiceServer creates a new mock instance.
func NewMockProjectServiceServer(ctrl *gomock.Controller) *MockProjectServiceServer {
	mock := &MockProjectServiceServer{ctrl: ctrl}
	mock.recorder = &MockProjectServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectServiceServer) EXPECT() *MockProjectServiceServerMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectServiceServer) CreateProject(arg0 context.Context, arg1 *projectv1.CreateProjectRequest) (*projectv1.CreateProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(*projectv1.CreateProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectServiceServerMockRecorder) CreateProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectServiceServer)(nil).CreateProject), arg0, arg1)
}

// DeleteProject mocks base method.
func (m *MockProjectServiceServer) DeleteProject(arg0 context.Context, arg1 *projectv1.DeleteProjectRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectServiceServerMockRecorder) DeleteProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectServiceServer)(nil).DeleteProject), arg0, arg1)
}

// GetProject mocks base method.
func (m *MockProjectServiceServer) GetProject(arg0 context.Context, arg1 *projectv1.GetProjectRequest) (*projectv1.GetProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(*projectv1.GetProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectServiceServerMockRecorder) GetProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectServiceServer)(nil).GetProject), arg0, arg1)
}

// ListProjects mocks base method.
func (m *MockProjectServiceServer) ListProjects(arg0 context.Context, arg1 *emptypb.Empty) (*projectv1.ListProjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1)
	ret0, _ := ret[0].(*projectv1.ListProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectServiceServerMockRecorder) ListProjects(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectServiceServer)(nil).ListProjects), arg0, arg1)
}

// StreamProjectUpdates mocks base method.
func (m *MockProjectServiceServer) StreamProjectUpdates(arg0 grpc.BidiStreamingServer[projectv1.ProjectUpdateRequest, projectv1.ProjectUpdateResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamProjectUpdates", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamProjectUpdates indicates an expected call of StreamProjectUpdates.
func (mr *MockProjectServiceServerMockRecorder) StreamProjectUpdates(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamProjectUpdates", reflect.TypeOf((*MockProjectServiceServer)(nil).StreamProjectUpdates), arg0)
}

// UpdateProject mocks base method.
func (m *MockProjectServiceServer) UpdateProject(arg0 context.Context, arg1 *projectv1.UpdateProjectRequest) (*projectv1.UpdateProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1)
	ret0, _ := ret[0].(*projectv1.UpdateProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectServiceServerMockRecorder) UpdateProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectServiceServer)(nil).UpdateProject), arg0, arg1)
}

// UpdateProjectWithIssue mocks base method.
func (m *MockProjectServiceServer) UpdateProjectWithIssue(arg0 context.Context, arg1 *projectv1.UpdateProjectWithIssueRequest) (*projectv1.UpdateProjectWithIssueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectWithIssue", arg0, arg1)
	ret0, _ := ret[0].(*projectv1.UpdateProjectWithIssueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectWithIssue indicates an expected call of UpdateProjectWithIssue.
func (mr *MockProjectServiceServerMockRecorder) UpdateProjectWithIssue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectWithIssue", reflect.TypeOf((*MockProjectServiceServer)(nil).UpdateProjectWithIssue), arg0, arg1)
}

// mustEmbedUnimplementedProjectServiceServer mocks base method.
func (m *MockProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProjectServiceServer")
}

// mustEmbedUnimplementedProjectServiceServer indicates an expected call of mustEmbedUnimplementedProjectServiceServer.
func (mr *MockProjectServiceServerMockRecorder) mustEmbedUnimplementedProjectServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProjectServiceServer", reflect.TypeOf((*MockProjectServiceServer)(nil).mustEmbedUnimplementedProjectServiceServer))
}

// MockUnsafeProjectServiceServer is a mock of UnsafeProjectServiceServer interface.
type MockUnsafeProjectServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeProjectServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeProjectServiceServerMockRecorder is the mock recorder for MockUnsafeProjectServiceServer.
type MockUnsafeProjectServiceServerMockRecorder struct {
	mock *MockUnsafeProjectServiceServer
}

// NewMockUnsafeProjectServiceServer creates a new mock instance.
func NewMockUnsafeProjectServiceServer(ctrl *gomock.Controller) *MockUnsafeProjectServiceServer {
	mock := &MockUnsafeProjectServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeProjectServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeProjectServiceServer) EXPECT() *MockUnsafeProjectServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedProjectServiceServer mocks base method.
func (m *MockUnsafeProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProjectServiceServer")
}

// mustEmbedUnimplementedProjectServiceServer indicates an expected call of mustEmbedUnimplementedProjectServiceServer.
func (mr *MockUnsafeProjectServiceServerMockRecorder) mustEmbedUnimplementedProjectServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProjectServiceServer", reflect.TypeOf((*MockUnsafeProjectServiceServer)(nil).mustEmbedUnimplementedProjectServiceServer))
}
