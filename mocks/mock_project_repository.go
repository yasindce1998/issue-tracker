// Code generated by MockGen. DO NOT EDIT.
// Source: c:/Users/mohammed_yasin/Downloads/issue-tracker-mohammed_yasin-in-mem/pkg/svc/project_repository.go
//
// Generated by this command:
//
//	mockgen -source=c:/Users/mohammed_yasin/Downloads/issue-tracker-mohammed_yasin-in-mem/pkg/svc/project_repository.go -destination=c:/Users/mohammed_yasin/Downloads/issue-tracker-mohammed_yasin-in-mem/mocks/mock_project_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	projectv1 "github.com/yasindce1998/issue-tracker/pkg/pb/project/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// AddIssueToProject mocks base method.
func (m *MockProjectRepository) AddIssueToProject(projectID, issueID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIssueToProject", projectID, issueID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIssueToProject indicates an expected call of AddIssueToProject.
func (mr *MockProjectRepositoryMockRecorder) AddIssueToProject(projectID, issueID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIssueToProject", reflect.TypeOf((*MockProjectRepository)(nil).AddIssueToProject), projectID, issueID)
}

// CreateProject mocks base method.
func (m *MockProjectRepository) CreateProject(project *projectv1.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectRepositoryMockRecorder) CreateProject(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectRepository)(nil).CreateProject), project)
}

// DeleteProject mocks base method.
func (m *MockProjectRepository) DeleteProject(projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectRepositoryMockRecorder) DeleteProject(projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectRepository)(nil).DeleteProject), projectID)
}

// ListProjects mocks base method.
func (m *MockProjectRepository) ListProjects() ([]*projectv1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects")
	ret0, _ := ret[0].([]*projectv1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectRepositoryMockRecorder) ListProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectRepository)(nil).ListProjects))
}

// ReadProject mocks base method.
func (m *MockProjectRepository) ReadProject(projectID string) (*projectv1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProject", projectID)
	ret0, _ := ret[0].(*projectv1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProject indicates an expected call of ReadProject.
func (mr *MockProjectRepositoryMockRecorder) ReadProject(projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProject", reflect.TypeOf((*MockProjectRepository)(nil).ReadProject), projectID)
}

// RemoveIssueFromProject mocks base method.
func (m *MockProjectRepository) RemoveIssueFromProject(projectID, issueID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIssueFromProject", projectID, issueID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveIssueFromProject indicates an expected call of RemoveIssueFromProject.
func (mr *MockProjectRepositoryMockRecorder) RemoveIssueFromProject(projectID, issueID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIssueFromProject", reflect.TypeOf((*MockProjectRepository)(nil).RemoveIssueFromProject), projectID, issueID)
}

// UpdateProject mocks base method.
func (m *MockProjectRepository) UpdateProject(project *projectv1.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectRepositoryMockRecorder) UpdateProject(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectRepository)(nil).UpdateProject), project)
}
