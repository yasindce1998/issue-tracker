// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yasindce1998/issue-tracker/pkg/svc (interfaces: IssuesRepository)
//
// Generated by this command:
//
//	mockgen -destination=c:/Users/mohammed_yasin/Downloads/issue-tracker-mohammed_yasin-in-mem/mocks/mock_issues_repository.go -package=mocks github.com/yasindce1998/issue-tracker/pkg/svc IssuesRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	issuesv1 "github.com/yasindce1998/issue-tracker/pkg/pb/issues/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockIssuesRepository is a mock of IssuesRepository interface.
type MockIssuesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIssuesRepositoryMockRecorder
	isgomock struct{}
}

// MockIssuesRepositoryMockRecorder is the mock recorder for MockIssuesRepository.
type MockIssuesRepositoryMockRecorder struct {
	mock *MockIssuesRepository
}

// NewMockIssuesRepository creates a new mock instance.
func NewMockIssuesRepository(ctrl *gomock.Controller) *MockIssuesRepository {
	mock := &MockIssuesRepository{ctrl: ctrl}
	mock.recorder = &MockIssuesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuesRepository) EXPECT() *MockIssuesRepositoryMockRecorder {
	return m.recorder
}

// CreateIssue mocks base method.
func (m *MockIssuesRepository) CreateIssue(issue *issuesv1.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssue", issue)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssue indicates an expected call of CreateIssue.
func (mr *MockIssuesRepositoryMockRecorder) CreateIssue(issue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssue", reflect.TypeOf((*MockIssuesRepository)(nil).CreateIssue), issue)
}

// DeleteIssue mocks base method.
func (m *MockIssuesRepository) DeleteIssue(issueID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssue", issueID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssue indicates an expected call of DeleteIssue.
func (mr *MockIssuesRepositoryMockRecorder) DeleteIssue(issueID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssue", reflect.TypeOf((*MockIssuesRepository)(nil).DeleteIssue), issueID)
}

// IsValidStatusTransition mocks base method.
func (m *MockIssuesRepository) IsValidStatusTransition(currentStatus, newStatus issuesv1.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidStatusTransition", currentStatus, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValidStatusTransition indicates an expected call of IsValidStatusTransition.
func (mr *MockIssuesRepositoryMockRecorder) IsValidStatusTransition(currentStatus, newStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidStatusTransition", reflect.TypeOf((*MockIssuesRepository)(nil).IsValidStatusTransition), currentStatus, newStatus)
}

// ListIssues mocks base method.
func (m *MockIssuesRepository) ListIssues(pageToken string, pageSize int) ([]*issuesv1.Issue, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssues", pageToken, pageSize)
	ret0, _ := ret[0].([]*issuesv1.Issue)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssues indicates an expected call of ListIssues.
func (mr *MockIssuesRepositoryMockRecorder) ListIssues(pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssues", reflect.TypeOf((*MockIssuesRepository)(nil).ListIssues), pageToken, pageSize)
}

// ReadIssue mocks base method.
func (m *MockIssuesRepository) ReadIssue(issueID string) (*issuesv1.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadIssue", issueID)
	ret0, _ := ret[0].(*issuesv1.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadIssue indicates an expected call of ReadIssue.
func (mr *MockIssuesRepositoryMockRecorder) ReadIssue(issueID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIssue", reflect.TypeOf((*MockIssuesRepository)(nil).ReadIssue), issueID)
}

// UpdateIssue mocks base method.
func (m *MockIssuesRepository) UpdateIssue(issue *issuesv1.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssue", issue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssue indicates an expected call of UpdateIssue.
func (mr *MockIssuesRepositoryMockRecorder) UpdateIssue(issue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssue", reflect.TypeOf((*MockIssuesRepository)(nil).UpdateIssue), issue)
}

// ValidateProjectExists mocks base method.
func (m *MockIssuesRepository) ValidateProjectExists(ctx context.Context, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProjectExists", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProjectExists indicates an expected call of ValidateProjectExists.
func (mr *MockIssuesRepositoryMockRecorder) ValidateProjectExists(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProjectExists", reflect.TypeOf((*MockIssuesRepository)(nil).ValidateProjectExists), ctx, projectID)
}

// ValidateUserExists mocks base method.
func (m *MockIssuesRepository) ValidateUserExists(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserExists", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUserExists indicates an expected call of ValidateUserExists.
func (mr *MockIssuesRepositoryMockRecorder) ValidateUserExists(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserExists", reflect.TypeOf((*MockIssuesRepository)(nil).ValidateUserExists), ctx, userID)
}
