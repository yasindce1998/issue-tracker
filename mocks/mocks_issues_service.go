// Code generated by MockGen. DO NOT EDIT.
// Source: c:/Users/mohammed_yasin/issue-tracker-mohammed_yasin/pkg/svc/issues_service.go
//
// Generated by this command:
//
//	mockgen -source=c:/Users/mohammed_yasin/issue-tracker-mohammed_yasin/pkg/svc/issues_service.go -destination=c:/Users/mohammed_yasin/issue-tracker-mohammed_yasin/mocks/mocks_issues_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	issuesv1 "github.com/yasindce1998/issue-tracker/pkg/pb/issues/v1"
	projectv1 "github.com/yasindce1998/issue-tracker/pkg/pb/project/v1"
	userv1 "github.com/yasindce1998/issue-tracker/pkg/pb/user/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockIssueStore is a mock of IssueStore interface.
type MockIssueStore struct {
	ctrl     *gomock.Controller
	recorder *MockIssueStoreMockRecorder
	isgomock struct{}
}

// MockIssueStoreMockRecorder is the mock recorder for MockIssueStore.
type MockIssueStoreMockRecorder struct {
	mock *MockIssueStore
}

// NewMockIssueStore creates a new mock instance.
func NewMockIssueStore(ctrl *gomock.Controller) *MockIssueStore {
	mock := &MockIssueStore{ctrl: ctrl}
	mock.recorder = &MockIssueStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueStore) EXPECT() *MockIssueStoreMockRecorder {
	return m.recorder
}

// IsValidStatusTransition mocks base method.
func (m *MockIssueStore) IsValidStatusTransition(currentStatus, newStatus issuesv1.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidStatusTransition", currentStatus, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValidStatusTransition indicates an expected call of IsValidStatusTransition.
func (mr *MockIssueStoreMockRecorder) IsValidStatusTransition(currentStatus, newStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidStatusTransition", reflect.TypeOf((*MockIssueStore)(nil).IsValidStatusTransition), currentStatus, newStatus)
}

// ReadIssues mocks base method.
func (m *MockIssueStore) ReadIssues() ([]*issuesv1.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadIssues")
	ret0, _ := ret[0].([]*issuesv1.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadIssues indicates an expected call of ReadIssues.
func (mr *MockIssueStoreMockRecorder) ReadIssues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIssues", reflect.TypeOf((*MockIssueStore)(nil).ReadIssues))
}

// ValidateProjectExists mocks base method.
func (m *MockIssueStore) ValidateProjectExists(ctx context.Context, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProjectExists", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProjectExists indicates an expected call of ValidateProjectExists.
func (mr *MockIssueStoreMockRecorder) ValidateProjectExists(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProjectExists", reflect.TypeOf((*MockIssueStore)(nil).ValidateProjectExists), ctx, projectID)
}

// ValidateUserExists mocks base method.
func (m *MockIssueStore) ValidateUserExists(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserExists", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUserExists indicates an expected call of ValidateUserExists.
func (mr *MockIssueStoreMockRecorder) ValidateUserExists(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserExists", reflect.TypeOf((*MockIssueStore)(nil).ValidateUserExists), ctx, userID)
}

// WriteIssues mocks base method.
func (m *MockIssueStore) WriteIssues(arg0 []*issuesv1.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteIssues", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteIssues indicates an expected call of WriteIssues.
func (mr *MockIssueStoreMockRecorder) WriteIssues(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteIssues", reflect.TypeOf((*MockIssueStore)(nil).WriteIssues), arg0)
}

// MockProjectDetailsFetcher is a mock of ProjectDetailsFetcher interface.
type MockProjectDetailsFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockProjectDetailsFetcherMockRecorder
	isgomock struct{}
}

// MockProjectDetailsFetcherMockRecorder is the mock recorder for MockProjectDetailsFetcher.
type MockProjectDetailsFetcherMockRecorder struct {
	mock *MockProjectDetailsFetcher
}

// NewMockProjectDetailsFetcher creates a new mock instance.
func NewMockProjectDetailsFetcher(ctrl *gomock.Controller) *MockProjectDetailsFetcher {
	mock := &MockProjectDetailsFetcher{ctrl: ctrl}
	mock.recorder = &MockProjectDetailsFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectDetailsFetcher) EXPECT() *MockProjectDetailsFetcherMockRecorder {
	return m.recorder
}

// GetProjectDetails mocks base method.
func (m *MockProjectDetailsFetcher) GetProjectDetails(ctx context.Context, projectID string) (*projectv1.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectDetails", ctx, projectID)
	ret0, _ := ret[0].(*projectv1.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectDetails indicates an expected call of GetProjectDetails.
func (mr *MockProjectDetailsFetcherMockRecorder) GetProjectDetails(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectDetails", reflect.TypeOf((*MockProjectDetailsFetcher)(nil).GetProjectDetails), ctx, projectID)
}

// MockUserDetailsFetcher is a mock of UserDetailsFetcher interface.
type MockUserDetailsFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockUserDetailsFetcherMockRecorder
	isgomock struct{}
}

// MockUserDetailsFetcherMockRecorder is the mock recorder for MockUserDetailsFetcher.
type MockUserDetailsFetcherMockRecorder struct {
	mock *MockUserDetailsFetcher
}

// NewMockUserDetailsFetcher creates a new mock instance.
func NewMockUserDetailsFetcher(ctrl *gomock.Controller) *MockUserDetailsFetcher {
	mock := &MockUserDetailsFetcher{ctrl: ctrl}
	mock.recorder = &MockUserDetailsFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDetailsFetcher) EXPECT() *MockUserDetailsFetcherMockRecorder {
	return m.recorder
}

// GetUserDetails mocks base method.
func (m *MockUserDetailsFetcher) GetUserDetails(ctx context.Context, userID string) (*userv1.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetails", ctx, userID)
	ret0, _ := ret[0].(*userv1.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetails indicates an expected call of GetUserDetails.
func (mr *MockUserDetailsFetcherMockRecorder) GetUserDetails(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetails", reflect.TypeOf((*MockUserDetailsFetcher)(nil).GetUserDetails), ctx, userID)
}
